generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model city {
  id_city               Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(45)
  country_id            Int
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  country               country                 @relation(fields: [country_id], references: [id_country], onDelete: NoAction, onUpdate: NoAction, map: "fk_city_country")
  distrit               distrit[]
  trip_details_has_city trip_details_has_city[]

  @@unique([name, country_id])
}

model client {
  id            Int            @id @default(autoincrement())
  fullName      String         @db.VarChar(255)
  country       String         @db.VarChar(255)
  email         String?        @db.VarChar(255)
  phone         String?        @db.VarChar(30)
  subregion     String         @db.VarChar(150)
  createdAt     DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?      @default(now()) @db.Timestamp(6)
  is_deleted    Boolean        @default(false)
  deleted_at    DateTime?      @db.Timestamp(6)
  delete_reason String?
  trip_details  trip_details[]

  @@index([email], map: "idx_email")
  @@index([fullName], map: "idx_full_name")
}

model country {
  id_country Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(45)
  code       String   @unique @db.VarChar(10)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  city       city[]
}

model distrit {
  id_distrit Int       @id @default(autoincrement())
  name       String    @db.VarChar(45)
  city_id    Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  city       city      @relation(fields: [city_id], references: [id_city], onDelete: NoAction, onUpdate: NoAction, map: "fk_distrit_city")
  hotel      hotel[]
  service    service[]

  @@unique([name, city_id])
}

model role {
  id_role       Int       @id @default(autoincrement())
  name          role_type @unique
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  is_deleted    Boolean   @default(false)
  deleted_at    DateTime? @db.Timestamp(6)
  delete_reason String?
  user          user[]
}

model user {
  id_user                                   Int                 @id @default(autoincrement())
  fullname                                  String              @db.VarChar(45)
  email                                     String              @unique @db.VarChar(45)
  password                                  String              @db.VarChar(200)
  description                               String?
  phone_number                              String?             @db.VarChar(20)
  id_role                                   Int
  created_at                                DateTime            @default(now()) @db.Timestamp(6)
  updated_at                                DateTime            @default(now()) @db.Timestamp(6)
  is_deleted                                Boolean             @default(false)
  deleted_at                                DateTime?           @db.Timestamp(6)
  delete_reason                             String?
  notification_notification_from_userTouser notification[]      @relation("notification_from_userTouser")
  notification_notification_to_userTouser   notification[]      @relation("notification_to_userTouser")
  settings                                  settings[]
  settings_settings_user_idTouser           settings[]          @relation("settings_user_idTouser")
  role                                      role                @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
  version_quotation                         version_quotation[]
}

model hotel {
  id_hotel      Int          @id @default(autoincrement())
  name          String       @db.VarChar(45)
  category      String       @db.VarChar(50)
  address       String?      @db.VarChar(100)
  distrit_id    Int
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @default(now()) @db.Timestamp(6)
  is_deleted    Boolean      @default(false)
  deleted_at    DateTime?    @db.Timestamp(6)
  delete_reason String?
  distrit       distrit      @relation(fields: [distrit_id], references: [id_distrit], onDelete: NoAction, onUpdate: NoAction, map: "fk_hotel_distrit")
  hotel_room    hotel_room[]
}

model hotel_room {
  id_hotel_room           Int                       @id @default(autoincrement())
  room_type               String                    @db.VarChar(100)
  season_type             String?                   @db.VarChar(50)
  price_usd               Decimal?                  @db.Decimal(10, 2)
  service_tax             Decimal?                  @db.Decimal(6, 2)
  rate_usd                Decimal?                  @db.Decimal(10, 2)
  price_pen               Decimal?                  @db.Decimal(10, 2)
  capacity                Int
  hotel_id                Int
  created_at              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at              DateTime                  @default(now()) @db.Timestamp(6)
  is_deleted              Boolean                   @default(false)
  deleted_at              DateTime?                 @db.Timestamp(6)
  delete_reason           String?
  hotel                   hotel                     @relation(fields: [hotel_id], references: [id_hotel], onDelete: NoAction, onUpdate: NoAction, map: "fk_hotel_room_hotel")
  hotel_room_trip_details hotel_room_trip_details[]
}

model quotation {
  id_quotation      Int                 @id @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  reservation       reservation?
  version_quotation version_quotation[]
}

model version_quotation {
  version_number        Int
  quotation_id          Int
  indirect_cost_margin  Decimal?                 @db.Decimal(5, 2)
  name                  String
  profit_margin         Decimal?                 @db.Decimal(5, 2)
  final_price           Decimal?                 @db.Decimal(10, 2)
  completion_percentage Int                      @default(0)
  status                version_quotation_status @default(DRAFT)
  official              Boolean                  @default(false)
  user_id               Int
  partner_id            Int?
  commission            Decimal?                 @default(0) @db.Decimal(5, 2)
  created_at            DateTime                 @default(now()) @db.Timestamp(6)
  updated_at            DateTime                 @default(now()) @db.Timestamp(6)
  is_deleted            Boolean                  @default(false)
  deleted_at            DateTime?                @db.Timestamp(6)
  delete_reason         String?
  trip_details          trip_details?
  partners              partner?                 @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_partner")
  quotation             quotation                @relation(fields: [quotation_id], references: [id_quotation], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_quotation")
  user                  user                     @relation(fields: [user_id], references: [id_user], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_user")

  @@id([version_number, quotation_id])
  @@index([quotation_id, official], map: "idx_quotation_id_official")
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_name_trgm", type: Gin)
  @@index([created_at], map: "idx_created_at")
  @@index([status], map: "idx_status")
  @@index([updated_at], map: "idx_updated_at")
  @@index([user_id], map: "idx_user_id")
}

model trip_details {
  id                        Int                         @id @default(autoincrement())
  version_number            Int
  quotation_id              Int
  start_date                DateTime                    @db.Date
  end_date                  DateTime                    @db.Date
  number_of_people          Int
  traveler_style            trip_details_traveler_style
  code                      String                      @db.VarChar(50)
  order_type                trip_details_order_type
  additional_specifications String?
  client_id                 Int
  hotel_room_trip_details   hotel_room_trip_details[]
  service_trip_details      service_trip_details[]
  client                    client                      @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_trip_details_client")
  version_quotation         version_quotation           @relation(fields: [version_number, quotation_id], references: [version_number, quotation_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_trip_details_version")
  trip_details_has_city     trip_details_has_city[]

  @@unique([version_number, quotation_id], map: "unique_version_id")
  @@index([client_id], map: "idx_client_id")
  @@index([end_date], map: "idx_enddate")
  @@index([start_date], map: "idx_startdate")
}

model trip_details_has_city {
  trip_details_id Int
  city_id         Int
  city            city         @relation(fields: [city_id], references: [id_city], onDelete: Cascade, onUpdate: NoAction)
  trip_details    trip_details @relation(fields: [trip_details_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([city_id, trip_details_id])
}

model notification {
  id                                Int      @id @default(autoincrement())
  from_user                         Int
  to_user                           Int
  message                           String
  is_read                           Boolean? @default(false)
  created_at                        DateTime @default(now()) @db.Timestamp(6)
  updated_at                        DateTime @default(now()) @db.Timestamp(6)
  user_notification_from_userTouser user     @relation("notification_from_userTouser", fields: [from_user], references: [id_user], onDelete: Cascade, map: "fk_notifications_from")
  user_notification_to_userTouser   user     @relation("notification_to_userTouser", fields: [to_user], references: [id_user], onDelete: Cascade, map: "fk_notifications_to")
}

model partner {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  is_deleted        Boolean             @default(false)
  deleted_at        DateTime?           @db.Timestamp(6)
  delete_reason     String?
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  version_quotation version_quotation[]
}

model hotel_room_trip_details {
  id              Int          @id @default(autoincrement())
  hotel_room_id   Int
  date            DateTime     @db.Date
  trip_details_id Int
  cost_person     Decimal      @db.Decimal(8, 2)
  hotel_room      hotel_room   @relation(fields: [hotel_room_id], references: [id_hotel_room], onDelete: Cascade, onUpdate: NoAction, map: "fk_hotel_room_quotation_hotel_room")
  trip_details    trip_details @relation(fields: [trip_details_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hotel_room_quotation_trip_details")
}

model reservation {
  id            Int                @id @default(autoincrement())
  quotation_id  Int                @unique(map: "unique_reservation")
  status        reservation_status @default(PENDING)
  created_at    DateTime           @default(now()) @db.Timestamp(6)
  updated_at    DateTime           @default(now()) @db.Timestamp(6)
  is_deleted    Boolean            @default(false)
  deleted_at    DateTime?          @db.Timestamp(6)
  delete_reason String?
  quotation     quotation          @relation(fields: [quotation_id], references: [id_quotation], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_quotation")

  @@index([created_at], map: "idx_created_at_r")
  @@index([status], map: "idx_status_r")
  @@index([updated_at], map: "idx_updated_at_r")
}

model settings {
  id                          Int              @id @default(autoincrement())
  key                         setting_key_enum
  value                       String?
  user_id                     Int?
  updated_at                  DateTime?        @default(now()) @db.Timestamp(6)
  updated_by_id               Int?
  user                        user?            @relation(fields: [updated_by_id], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_updated_by")
  user_settings_user_idTouser user?            @relation("settings_user_idTouser", fields: [user_id], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model service {
  id                   Int                    @id @default(autoincrement())
  service_type_id      Int
  description          String
  duration             String?                @db.VarChar(20)
  passengers_min       Int?
  passengers_max       Int?
  price_usd            Decimal?               @db.Decimal(8, 2)
  tax_igv_usd          Decimal?               @db.Decimal(8, 2)
  rate_usd             Decimal?               @db.Decimal(8, 2)
  price_pen            Decimal?               @db.Decimal(8, 2)
  tax_igv_pen          Decimal?               @db.Decimal(8, 2)
  rate_pen             Decimal?               @db.Decimal(8, 2)
  distrit_id           Int
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  distrit              distrit                @relation(fields: [distrit_id], references: [id_distrit], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_distrit")
  service_type         service_type           @relation(fields: [service_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_service_service_type")
  service_trip_details service_trip_details[]
}

model service_trip_details {
  id              Int          @id @default(autoincrement())
  trip_details_id Int
  service_id      Int
  date            DateTime     @db.Date
  cost_person     Decimal      @db.Decimal(8, 2)
  service         service      @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  trip_details    trip_details @relation(fields: [trip_details_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service_type {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  service    service[]
}

view reservation_version_summary {
  reservation_date   DateTime?           @db.Timestamp(6)
  final_price        Decimal?            @db.Decimal(10, 2)
  profit_margin      Decimal?            @db.Decimal(5, 2)
  quotation_id       Int?
  version_number     Int?
  reservation_status reservation_status?
  id                 Int                 @id
}

enum reservation_status {
  PENDING
  ACTIVE
  REJECTED
}

enum role_type {
  MANAGER_ROLE
  EMPLOYEE_ROLE
}

enum trip_details_order_type {
  DIRECT
  INDIRECT
}

enum trip_details_traveler_style {
  STANDARD
  COMFORT
  LUXUS
}

enum version_quotation_status {
  DRAFT
  COMPLETED
  CANCELATED
  APPROVED
}

enum setting_key_enum {
  MAX_ACTIVE_SESSIONS
  DATA_CLEANUP_PERIOD
  LAST_CLEANUP_RUN
}
