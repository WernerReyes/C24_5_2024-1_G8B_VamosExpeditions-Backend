generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model accommodation {
  id_accommodation   Int                  @id @default(autoincrement())
  name               String               @db.VarChar(45)
  category           String               @db.VarChar(45)
  address            String               @db.VarChar(45)
  rating             Int
  email              String?              @db.VarChar(50)
  distrit_id_distrit Int
  distrit            distrit              @relation(fields: [distrit_id_distrit], references: [id_distrit], onDelete: NoAction, onUpdate: NoAction, map: "fk_accommodation_distrit")
  accommodation_room accommodation_room[]
}

model accommodation_room {
  id_accommodation_room Int           @id @default(autoincrement())
  room_type             String        @db.VarChar(100)
  price_usd             Decimal?      @db.Decimal(10, 2)
  service_tax           Decimal?      @db.Decimal(10, 2)
  rate_usd              Decimal?      @db.Decimal(10, 2)
  price_pen             Decimal?      @db.Decimal(10, 2)
  capacity              Int
  available             Boolean
  accommodation_id      Int
  accommodation         accommodation @relation(fields: [accommodation_id], references: [id_accommodation], onDelete: NoAction, onUpdate: NoAction, map: "fk_hotel_room_hotel")
}

model city {
  id_city              Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(45)
  country_id           Int
  country              country                @relation(fields: [country_id], references: [id_country], onDelete: NoAction, onUpdate: NoAction, map: "fk_city_country")
  distrit              distrit[]
  reservation_has_city reservation_has_city[]
}

model client {
  id          Int           @id @default(autoincrement())
  fullName    String        @db.VarChar(255)
  country     String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  phone       String        @db.VarChar(30)
  continent   String        @db.VarChar(150)
  createdAt   DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @default(now()) @db.Timestamp(6)
  reservation reservation[]

  @@index([email], map: "idx_email")
  @@index([fullName], map: "idx_full_name")
}

model country {
  id_country Int    @id @default(autoincrement())
  name       String @db.VarChar(45)
  code       String @unique @db.VarChar(10)
  city       city[]
}

model distrit {
  id_distrit    Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  city_id       Int
  accommodation accommodation[]
  city          city            @relation(fields: [city_id], references: [id_city], onDelete: NoAction, onUpdate: NoAction, map: "fk_distrit_city")
}

model reservation {
  id                        Int                        @id @default(autoincrement())
  number_of_people          Int
  start_date                DateTime                   @db.Date
  end_date                  DateTime                   @db.Date
  traveler_style            reservation_traveler_style
  status                    reservation_status         @default(PENDING)
  order_type                reservation_order_type     @default(DIRECT)
  additional_specifications String?
  code                      String                     @db.VarChar(50)
  clientId                  Int
  createdAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  client                    client                     @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_client")
  reservation_has_city      reservation_has_city[]
}

model reservation_has_city {
  city_id        Int
  reservation_id Int
  city           city        @relation(fields: [city_id], references: [id_city], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_city")
  reservation    reservation @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation")

  @@id([city_id, reservation_id])
}

model role {
  id_role Int       @id @default(autoincrement())
  name    role_type @unique
  user    user[]
}

model user {
  id_user  Int    @id @default(autoincrement())
  fullname String @db.VarChar(45)
  email    String @db.VarChar(45)
  password String @db.VarChar(200)
  id_role  Int
  role     role   @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
}

enum role_type {
  MANAGER_ROLE
  EMPLOYEE_ROLE
}

enum reservation_status {
  ACTIVE
  PENDING
  COMPLETED
  CANCELATED
}

enum reservation_order_type {
  DIRECT
  INDIRECT
}

enum reservation_traveler_style {
  STANDARD
  COMFORT
  LUXUS
}
